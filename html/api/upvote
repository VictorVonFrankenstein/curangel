#!/usr/bin/env python3
# -*- coding: UTF-8 -*-

import cgi
import time
import datetime
import uuid
import random
import string
import json

from hive.hive import Hive
from hive.blockchain import Blockchain
from hive.account import Account
from sorcery import dict_of

from lib import db
from lib import api
from lib import errorHandler
from lib.config import config, load_credentials
from lib.notify_hook import notify

from lib.rate_limit import Enforcer, RateLimitError
from lib.db_util import QueueDBHelper


credentials = load_credentials()
user = credentials.username
key = credentials.posting

client = Hive(keys=[key],nodes=config.nodes)
chain = Blockchain(client)

# output variable
data = {}

# get and set variables
form     = cgi.FieldStorage()
username = form.getvalue('username')
userhash = form.getvalue('userhash')
postlink = form.getvalue('postlink')
deleteuv = form.getvalue('deleteupvote')
safemode = form.getvalue('safe_mode')

# if safemode is a string, handle it
if isinstance(safemode, str):
  if safemode.lower().startswith("t"):
    safemode = True
  else:
    safemode = False

# check permissions
results = db.select('users',['id'],{'account':username,'hash':userhash,'curator':1},'id')
if len(results) < 1:
  errorHandler.throwError('No permission')

# delete post
if deleteuv:
  post = db.select('upvotes',['status'],{'account':username,'id':deleteuv},'status')
  if len(results) < 1:
    errorHandler.throwError('Upvote not found!')
  db.update('upvotes',{'status': 'canceled'},{'id':deleteuv})
  data['status'] = 'success'
else:
  # submit new post
  if postlink:
    link = postlink.split('#')
    if len(link) > 1:
      link = link[1].split('/')
    else:
      link = postlink.split('/')

    post = client.get_content(link[-2][1:],link[-1])
    chaininfo = chain.info()

    # check if curator is author himself
    if post['author'] == username:
      errorHandler.throwError('Curating your own post? Are you serious?')

    # check if curator is author himself
    if post['author'] == 'curangel':
      errorHandler.throwError('We do not vote for ourselves :D')

    # check if cross post
    metadata = post['json_metadata']
    if metadata != '':
      metadata = json.loads(metadata)
      if 'tags' in metadata:
        if 'cross-post' in metadata['tags'] and 'original_permlink' in metadata:
          errorHandler.throwError('This is a cross-post. We do not vote on those.')

    # check if author used bitbots
    bidbots = ['alfanso','appreciator','bdvoter','bid4joy','boomerang','booster','bot-api','brandonfrye','buildawhale','edensgarden','inciter','joeparys','leo.voter','luckyvotes','minnowbooster','minnowhelper','minnowvotes','ocdb','onlyprofitbot','postpromoter','profitvote','promobot','qustodian','redlambo','rocky1','sct.voter','smartmarket','smartsteem','sneaky-ninja','sportsvoter','spydo','steemyoda','thebot','therising','tipu','treeplanter','triplea.bot','unknownonline','upmewhale','upmyvote','whalepromobot']
    account = Account(post['author'],client)
    history = account.get_account_history(-1,1000,filter_by='transfer')
    for h in history:
      if h['memo'][:4] == 'http' and h['to'] in bidbots:
        notification = ''
        notified = db.select('upvote_notifications',['user'],{'user':post['author'],'created >':"datetime('now','-7 days')",'reason':'bidbot'},'created')
        if len(notified) < 1:
          db.insert('upvote_notifications',{'id':uuid.uuid4().hex,'user':post['author'],'reason':'bidbot'})
          notification = ' User has received a comment.'
          permlink = ''.join(random.sample(string.ascii_lowercase, k=10))
          body = "Great work! Your post was selected for curation by one of @curangel's dedicated curators for its contribution to quality!\n<br />"
          body += "...unfortunately, it had to be excluded from curation because you recently bought a vote from a bid bot ("+h['to']+")."
          body += "Authors who participate in vote buying are not eligible for our votes.\n<br />"
          body += "But don't worry. It only takes 7 days of not buying votes to be able to receive our vote again, so maybe one of your next posts will make it!\n<br />"
          body += "Take care and hive five!"
          client.commit.post('Re: '+post['title'], body, 'curangel', permlink=permlink, reply_identifier='@'+post['author']+'/'+post['permlink'])
        errorHandler.throwError('User has used a bid bot recently. Will not add to queue.'+notification)
      last = h['timestamp']
      txts = time.mktime(datetime.datetime.strptime(h['timestamp'], "%Y-%m-%dT%H:%M:%S").timetuple())
      chaints = time.mktime(datetime.datetime.strptime(chaininfo['time'], "%Y-%m-%dT%H:%M:%S").timetuple())
      if chaints - txts > 60*60*24*7:
        break


    # check if author used liquifier
    liquifiers = ['likwid','reward.app']
    beneficiaries = post['beneficiaries']
    notification = ''
    for b in beneficiaries:
      if b['account'] in liquifiers:
        notified = db.select('upvote_notifications',['user'],{'user':post['author'],'reason':'liquifier'},'created')
        if len(notified) < 1:
          db.insert('upvote_notifications',{'id':uuid.uuid4().hex,'user':post['author'],'reason':'liquifier'})
          notification = ' User has received a comment.'
          permlink = ''.join(random.sample(string.ascii_lowercase, k=10))
          body = "Great work! Your post was selected for curation by one of @curangel's dedicated curators for its contribution to quality!\n<br />"
          body += "...unfortunately, it had to be excluded from curation because of the use of a service ("+b['account']+") to liquify rewards."
          body += "Our upvotes are reserved for content which is created with a commitment to long term growth and decentralization of Hive Power.\n<br />"
          body += "This exclusion only applies to this and eventually other future liquified posts and not all your publications in general. \n<br />"
          body += "Take care and hive five!"
          client.commit.post('Re: '+post['title'], body, 'curangel', permlink=permlink, reply_identifier='@'+post['author']+'/'+post['permlink'])
        errorHandler.throwError('Post is using a liquifier ('+b['account']+') for rewards. Will not add to queue.'+notification)


    # check if already voted
    for vote in post['active_votes']:
      if vote['voter'] == 'curangel':
        errorHandler.throwError('We already voted on that post.')

    # check if post has a lot of rewards already
    if float(post['pending_payout_value'][:-4]) >= 30:
      errorHandler.throwError('This post has quite a bit of recognition already. Please curate content which really needs a boost, there are many posts which receive next to nothing!')

    # check if exists in upvote queue
    results = db.select('upvotes',['id'],{'user':post['author'],'slug':post['permlink'],'status !': 'canceled'},'id')
    if len(results) > 0:
      errorHandler.throwError('This post has been submitted before. Will not add to queue again.')

    # check if exists in downvote queue
    result = db.select('downvotes',['account'],{'slug':post['permlink'],'status':'wait'},'id')
    if len(result) > 0:
      errorHandler.throwError('Post was already marked for downvote by '+result[0]['account'])

    # check cashout time
    cashoutts = time.mktime(datetime.datetime.strptime(post['cashout_time'], "%Y-%m-%dT%H:%M:%S").timetuple())
    chaints = time.mktime(datetime.datetime.strptime(chaininfo['time'], "%Y-%m-%dT%H:%M:%S").timetuple())
    if cashoutts - chaints < 60*60*36:
      errorHandler.throwError('Cashout of post in less than 36 hours. Will not add to queue.')

    # check blacklist
    results = db.select('blacklist',['reason'],{'user':post['author']},'id')
    if len(results) > 0:
      errorHandler.throwError('Author blacklistet. Reason: '+results[0]['reason']+'. Will not add to queue.')

    # check previous votes for author
    results = db.select('upvotes',['created'],{'user':post['author'],'account':username,'status !':'canceled','created >':"datetime('now','-5 days')"},'created')
    if len(results) > 0:
      errorHandler.throwError('You already submitted a post of this author in the past 5 days. Will not add to queue.')
    results = db.select('upvotes',['created'],{'user':post['author'],'status !':'canceled','created >':"datetime('now','-18 hours')",'status !':'canceled'},'created')
    if len(results) > 0:
      errorHandler.throwError('This author has had a post submitted within the past 18 hours. Will not add to queue.')

    # get queue length
    db_path = db.config.db.file
    with QueueDBHelper(db_path) as qdbh:
      queue_length = qdbh.query_queue_length()


    # let's not let the queue get out of hand (fix mana someday)
    if hasattr(config, "hard_queue_limit"):
      if queue_length >= config.hard_queue_limit:
        message = f"I'm sorry, {username}; I'm afraid I can't do that. "
        message += f"\n\n(Queue size would exceed {config.hard_queue_limit}.)"
        link = post['url']
        notify(
          "queue-hard-limit",
          "Curangel queue is full",
          f"{username} tried to submit {link} but hit the hard limit"
        )
        errorHandler.throwError(message)

    # check mana
    try:
      enforcer = Enforcer.from_database_user(db_path, username, chaininfo['head_block_number'])
      allowed_strength, *_ = enforcer.curate(queue_length)
      if safemode and allowed_strength < 1:
        errorHandler.throwError("Not voting less than full strength in safe mode. Wait for recharge or disable safe mode.")
      enforcer.write_to_database(db_path, username, chaininfo['head_block_number'])
    except RateLimitError as e:
      errorHandler.throwError(e.fmt(username))

    upvote_id = uuid.uuid4().hex

    post_type = 1
    if post['parent_author']:
      post_type = 2
    db.insert('upvotes',{'id':upvote_id, 'account':username, 'link': post['url'], 'user': post['author'], 'category': post['category'], 'slug': post['permlink'], 'title': post['title'], 'type': post_type, 'payout': post['cashout_time'], 'status': 'in queue', 'reward_sbd': 0, 'reward_sp': 0})

    with QueueDBHelper(db_path, read_only=False) as qdbh:
      qdbh.upsert_upvote_strength(upvote_id, allowed_strength)

  # get upvotes
  upvotes = []
  results = db.select('upvotes',['id','created','link','user','category','slug','title','type','payout','status','reward_sp'],{'account':username},'created DESC', 1000)
  for row in results:
    upvotes.append(dict(row))

  data['upvotes'] = upvotes

api.output(data)
