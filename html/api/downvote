#!/usr/bin/python3
# -*- coding: UTF-8 -*-

import cgi
import time
import datetime
import uuid

from hive.hive import Steem
from hive.blockchain import Blockchain

from lib import db
from lib import api
from lib import errorHandler


hived_nodes = [
#  'https://anyx.io',
  'https://api.hive.blog',
]

client = Hive(nodes=hived_nodes)
chain = Blockchain(client)

# blacklist
blacklist = {
  'ericet':'This is not a tool for your personal vendetta.'
}

# output variable
data = {}

# get and set variables
form     = cgi.FieldStorage()
username = form.getvalue('username')
userhash = form.getvalue('userhash')
postlink = form.getvalue('postlink')
limit    = form.getvalue('limit')
reason   = form.getvalue('reason')
deletedv = form.getvalue('deletedownvote')

# check permissions
results = db.select('users',['id'],{'account':username,'hash':userhash},'id')
delegator = 0
delegations = client.get_vesting_delegations(username,'curangel',1)
if len(delegations) > 0 and delegations[0]['delegatee'] == 'curangel':
  delegator = 1
if len(results) < 1 or delegator == 0:
  errorHandler.throwError('No permission')


if limit:
  limit = int(limit)

if deletedv:
  post = db.select('downvotes',['status'],{'account':username,'id':deletedv},'status')
  if len(results) < 1:
    errorHandler.throwError('Downvote not found!')
  db.update('downvotes',{'status': 'canceled'},{'id':deletedv})
  data['status'] = 'success'
else:
  # submit new post
  if postlink:
    link = postlink.split('#')
    if len(link) > 1:
      link = link[1].split('/')
    else:
      link = postlink.split('/')

    post = client.get_content(link[-2][1:],link[-1])

    # check if reason was given
    if not reason:
      errorHandler.throwError('You need to give a reason for the downvote.')

    # check blacklist
    if username in blacklist:
      errorHandler.throwError('You are blocked. '+blacklist[username])

    # check if user has more than the limit of posts waiting
#    result = db.select('downvotes',['id'],{'account':username,'status':'wait'},'id')
#    if len(result) > 2:
#      errorHandler.throwError('You already have '+len(result)+' posts waiting to be downvoted. Please wait until those are processed.')

    # check if post is in upvote queue
    result = db.select('upvotes',['account'],{'slug':post['permlink'],'status':'in queue'},'id')
    if len(result) > 0:
      errorHandler.throwError('Post was already curated by '+result[0]['account'])

    # check if already voted
    for vote in post['active_votes']:
      if vote['voter'] == 'curangel':
        errorHandler.throwError('We already voted on that post.')

    # check if user added that post already
    result = db.select('downvotes',['id'],{'account':username,'link':post['url'],'status':'wait'},'id')
    if len(result) > 0:
      errorHandler.throwError('You already added this post. Re-adding it would not change anything. If you want to maximize your power on this post, do not add others in this round.')

    # check cashout time
    cashoutts = time.mktime(datetime.datetime.strptime(post['cashout_time'], "%Y-%m-%dT%H:%M:%S").timetuple())
    chaints = time.mktime(datetime.datetime.strptime(chain.info()['time'], "%Y-%m-%dT%H:%M:%S").timetuple())
    if cashoutts - chaints < 60*60*24:
      errorHandler.throwError('Cashout of post in less than 24 hours. Will not add to queue.')

    # check if limit is valid
    if limit < 10 or limit > 99:
      errorHandler.throwError('Invalid limit for downvote weight.')

    targetreward = round(float(post['pending_payout_value'][:-4]) * (100-limit) / 100, 3)

    post_type = 1
    if post['parent_author']:
      post_type = 2
    db.insert('downvotes',{'id':uuid.uuid4().hex, 'account': username, 'reason': reason, 'link': post['url'], 'user': post['author'], 'category': post['category'], 'slug': post['permlink'], 'title': post['title'], 'type': post_type, 'payout': post['cashout_time'], 'status': 'wait', 'reward': post['pending_payout_value'], 'maxi': targetreward})

  # get downvotes
  downvotes = []
  results = db.select('downvotes',['id','created','reason','link','user','category','slug','title','type','payout','status','reward','maxi'],{'account':username},'created DESC')
  for row in results:
    downvotes.append(dict(row))

  data['downvotes'] = downvotes

api.output(data)
